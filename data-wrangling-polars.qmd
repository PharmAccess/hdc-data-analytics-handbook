# Data wrangling using Polars

```{python}
import duckdb
import polars as pl
```

## Connect to database

```{python}
SILVER = "data/SILVER"
con = duckdb.connect(f"{SILVER}/pregnancy.duckdb")
```

Since polars doesn't handle duckdb files directly, we'll first export the relevant tables as parquet files.

```{python}
con.sql(
    """
    COPY (SELECT * FROM patient_timeline)
    TO 'data/patient_timeline.parquet' (FORMAT PARQUET)
    """
)
con.sql(
    """
    COPY (SELECT * FROM price_list)
    TO 'data/price_list.parquet' (FORMAT PARQUET)
    """
)
```

## Retrieve data

```{python}
df = pl.read_parquet("data/patient_timeline.parquet")
print(df)
```

## Group by, summarise

Count the number of patients per organization.

```{python}
df_grouped = (
    df
    .group_by("organization_name")
    .agg(
        pl.n_unique("patient_id")
    )
)
print(df_grouped)
```

### Lazy evaluation

Polars supports both lazy and non-lazy (eager) evaluation. Lazy evaluation means that execution is deferred to the last minute, which can have significant performance advantages.

```{python}
df_grouped = (
    df.lazy()
    .group_by("organization_name")
    .agg(
        pl.n_unique("patient_id")
    )
    .collect()
)
print(df_grouped)
```

## Filter

Filter patients by procedure.

```{python}
df_filtered = (
    df
    .filter(pl.col("procedure_name") == "Well child visit (procedure)")
)
print(df_filtered)
```

## Mutate

Extract year from start time.

```{python}
df_new_var = (
    df
    .with_columns(
        pl.col("start_time").str.to_datetime(format="%Y-%m-%dT%H:%M:%S%z")
        .dt.year().alias("start_year")
    )
)
print(df_new_var)
```

## Order

Order by start time.

```{python}
df_ordered = (
    df
    .with_columns(
        pl.col("start_time").str.to_datetime(format="%Y-%m-%dT%H:%M:%S%z")
    )
    .sort("start_time")
)
print(df_ordered)
```

## Rename

Rename birth date column.

```{python}
df_renamed = (
    df
    .rename({"birthDate": "birth_date"})
)
print(df_renamed)
```

## Join

First get price list data to join on.

```{python}
df_price_list = pl.read_parquet("data/price_list.parquet")
print(df_price_list)
```

And then join on code and system.

```{python}
df_joined = (
    df
    .join(
        df_price_list,
        left_on=["vaccine_code", "vaccine_code_system"],
        right_on=["code", "system"],
        how="left"
    )
)
print(df_joined)
```
